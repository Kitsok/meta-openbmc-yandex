--- kernel-source/drivers/char/ipmi/ipmi_msghandler.c.orig	2016-12-15 14:05:06.000000000 +0300
+++ kernel-source/drivers/char/ipmi/ipmi_msghandler.c	2016-12-15 14:55:44.835167103 +0300
@@ -2861,7 +2861,7 @@ int ipmi_register_smi(const struct ipmi_
 	if (rv)
 		goto out;
 
-	get_guid(intf);
+/*	get_guid(intf); */
 
 	if ((intf->ipmi_version_major > 1)
 			|| ((intf->ipmi_version_major == 1)
@@ -3612,6 +3612,8 @@ static int handle_bmc_rsp(ipmi_smi_t
 	}
 
+//	printk(KERN_WARNING "msg=%p recv=%p\n", 
+//		msg, recv_msg);
 	user = recv_msg->user;
 	/* Make sure the user still exists. */
 	if (user && !user->valid) {
 		/* The user for the message went away, so give up. */
@@ -3661,6 +3661,7 @@ static int handle_one_recv_msg(ipmi_smi_
 #endif
 	if (msg->rsp_size < 2) {
 		/* Message is too small to be correct. */
+		printk(KERN_WARNING PFX "BMC returned to small a message, got %d bytes\n", msg->rsp_size);
 		printk(KERN_WARNING PFX "BMC returned to small a message"
 		       " for netfn %x cmd %x, got %d bytes\n",
 		       (msg->data[0] >> 2) | 1, msg->data[1], msg->rsp_size);
@@ -3671,7 +3671,10 @@ static int handle_one_recv_msg(ipmi_smi_
 		msg->rsp[1] = msg->data[1];
 		msg->rsp[2] = IPMI_ERR_UNSPECIFIED;
 		msg->rsp_size = 3;
-	} else if (((msg->rsp[0] >> 2) != ((msg->data[0] >> 2) | 1))
+	} else {
+//		printk(KERN_WARNING PFX "%p\n", msg->rsp);
+//		printk(KERN_WARNING PFX "%p\n", msg->data);
+		if (((msg->rsp[0] >> 2) != ((msg->data[0] >> 2) | 1))
 		   || (msg->rsp[1] != msg->data[1])) {
 		/*
 		 * The NetFN and Command in the response is not even
@@ -3687,6 +3690,7 @@ static int handle_one_recv_msg(ipmi_smi_
 		msg->rsp[1] = msg->data[1];
 		msg->rsp[2] = IPMI_ERR_UNSPECIFIED;
 		msg->rsp_size = 3;
+	    }
 	}
 
 	if ((msg->rsp[0] == ((IPMI_NETFN_APP_REQUEST|1) << 2))
@@ -3820,6 +3820,8 @@ static void handle_new_recv_msgs(ipmi_sm
 	while (!list_empty(&intf->waiting_rcv_msgs)) {
+		// static int v = 0;
 		smi_msg = list_entry(intf->waiting_rcv_msgs.next,
 				     struct ipmi_smi_msg, link);
+		// if (++v == 4) { printk("smi_msg=%p\n", smi_msg); v=0; }
 		list_del(&smi_msg->link);
 		if (!run_to_completion)
 			spin_unlock_irqrestore(&intf->waiting_rcv_msgs_lock,
@@ -3899,6 +3899,8 @@ static void smi_recv_tasklet(unsigned lo
 			entry = intf->xmit_msgs.next;
 
 		if (entry) {
+//			printk("smi_recv_tasklet: e=%p n=%p hp_msgs=%p msgs=%p\n",
+//				entry, entry->next, intf->hp_xmit_msgs.next, intf->xmit_msgs.next);
 			list_del(entry);
 			newmsg = list_entry(entry, struct ipmi_smi_msg, link);
 			intf->curr_msg = newmsg;
--- source/drivers/i2c/busses/i2c-aspeed.c.orig	2016-12-15 19:40:58.000000000 +0300
+++ source/drivers/i2c/busses/i2c-aspeed.c	2016-12-15 20:03:49.690235539 +0300
@@ -366,6 +366,8 @@ static int ast_i2c_issue_oob_command(str
 					      bus->adap.timeout*HZ);
 }
 
+static int ast_i2c_reg_slave(struct i2c_client *client);
+
 static u8 ast_i2c_bus_error_recover(struct ast_i2c_bus *bus)
 {
 	u32 sts, i;
@@ -410,13 +410,19 @@ static u8 ast_i2c_bus_error_recover(stru
 		}
 
 	} else if (!(sts & AST_I2CD_SDA_LINE_STS)) {
+		struct i2c_client *client;
 		//else if SDA == 0, the device is dead. We need to reset the bus
 		//And do the recovery command.
 		dev_dbg(bus->dev, "I2C's slave is dead, try to recover it\n");
+		client = bus->slave;
 		for (i = 0; i < 2; i++) {
 			ast_i2c_dev_init(bus);
 			ast_i2c_issue_oob_command(bus,
 					AST_I2CD_BUS_RECOVER_CMD_EN);
+			if (client != NULL) {
+				bus->slave = NULL;
+				ast_i2c_reg_slave(client);
+			}
 			if (bus->cmd_err != 0) {
 				dev_dbg(bus->dev, "ERROR!! Failed to do recovery command(0x%08x)\n", bus->cmd_err);
 				return -1;
@@ -628,6 +628,19 @@ static bool ast_i2c_slave_irq(struct ast
 		i2c_slave_event(slave, I2C_SLAVE_STOP, &value);
 	}
 
+	if (irq_status & AST_I2CD_INTR_BUS_RECOVER_DONE)
+		status_ack |= AST_I2CD_INTR_BUS_RECOVER_DONE;
+
+	if (irq_status & AST_I2CD_INTR_ABNORMAL)
+		status_ack |= AST_I2CD_INTR_ABNORMAL;
+
+	if (irq_status & AST_I2CD_INTR_TX_ACK) {
+		dev_err(bus->dev,
+			"Unexpected ACK on read request (slave=%04x).\n",
+				bus->slave_state);
+		status_ack |= AST_I2CD_INTR_TX_ACK;
+	}
+
 	if (status_ack != irq_status)
 		dev_err(bus->dev,
 			"irq handled != irq. expected %x, but was %x\n",
@@ -573,7 +573,7 @@ static bool ast_i2c_slave_irq(struct ast
 		goto out;
 	}
 
-	dev_dbg(bus->dev, "slave irq status 0x%08x, cmd 0x%08x\n",
+	dev_dbg(bus->dev, "slave irq status 0x%08x, cmd 0x%08x\n",
 		irq_status, command);
 
 	/* Slave was sent something. */
@@ -860,7 +866,7 @@ static int ast_i2c_reg_slave(struct i2c_
 
 	/* Switch from master mode to slave mode. */
 	func_ctrl_reg_val = ast_i2c_read(bus, I2C_FUN_CTRL_REG);
-	func_ctrl_reg_val &= ~AST_I2CD_MASTER_EN;
+	//func_ctrl_reg_val &= ~AST_I2CD_MASTER_EN;
 	func_ctrl_reg_val |= AST_I2CD_SLAVE_EN;
 	ast_i2c_write(bus, func_ctrl_reg_val, I2C_FUN_CTRL_REG);
 
@@ -886,7 +892,7 @@ static int ast_i2c_unreg_slave(struct i2
 	/* Switch from slave mode to master mode. */
 	func_ctrl_reg_val = ast_i2c_read(bus, I2C_FUN_CTRL_REG);
 	func_ctrl_reg_val &= ~AST_I2CD_SLAVE_EN;
-	func_ctrl_reg_val |= AST_I2CD_MASTER_EN;
+	//func_ctrl_reg_val |= AST_I2CD_MASTER_EN;
 	ast_i2c_write(bus, func_ctrl_reg_val, I2C_FUN_CTRL_REG);
 
 	bus->slave = NULL;
